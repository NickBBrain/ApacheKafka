-------------------3------------------------- Lets Go
using System.Reflection;
using Microsoft.Extensions.DependencyInjection;

namespace DetNet
{
    public interface IDataOperation
    {
        string Name { get; }
        int Process(int input);
    }

    public class IncrementOperation : IDataOperation
    {
        public string Name => "Increment";
        public int Process(int input) => input + 1;
    }

    public class DoubleOperation : IDataOperation
    {
        public string Name => "Double";
        public int Process(int input) => input * 2;
    }

    public class OperationProcessor
    {
        private readonly IEnumerable<IDataOperation> _operations;

        public OperationProcessor(IEnumerable<IDataOperation> operations)
        {
            _operations = operations;
        }

        public int Execute(string operationName, int value)
        {
            var op = _operations.FirstOrDefault(o => 
                string.Equals(o.Name, operationName, StringComparison.OrdinalIgnoreCase));

            if (op is null)
                throw new InvalidOperationException($"Operation '{operationName}' not found.");

            return op.Process(value);
        }
    }

    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddDataOperations(this IServiceCollection services)
        {
            var operationType = typeof(IDataOperation);
            var implementations = Assembly.GetExecutingAssembly()
                                          .GetTypes()
                                          .Where(t => operationType.IsAssignableFrom(t) && 
                                                      t.IsClass && !t.IsAbstract);

            foreach (var impl in implementations)
                services.AddTransient(operationType, impl);

            return services;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // DI Container setup
            var services = new ServiceCollection();
            services.AddDataOperations(); // Register all IDataOperation dynamically
            services.AddTransient<OperationProcessor>();

            var provider = services.BuildServiceProvider();
            var processor = provider.GetRequiredService<OperationProcessor>();

            Console.Write("Enter operation name: ");
            var op = Console.ReadLine();

            Console.Write("Enter value: ");
            if (!int.TryParse(Console.ReadLine(), out var value))
            {
                Console.WriteLine("Invalid value.");
                return;
            }

            try
            {
                var result = processor.Execute(op, value);
                Console.WriteLine($"Result: {result}");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
