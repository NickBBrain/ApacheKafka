

regionBasedDataStorageValidator
یه مینیمال api  که وظیفه ش اعتبارسنجی ذخیره داده ها براساس قوانین منطقه ای هسا
هدف اینه که داده های کاربران فقط ئدر دیتاسنترهای مجاز باتوجه به کشور مبدا کاربر ذخیره بشنچالش شناسایی و رفع نقض قوانین ذخیره داده براساس منطقع س
برای تست از این هدرها استفاده بشه
از هدرهای زیر استفاده باشهx-user-region
x-target-region
کش نداریماگر منطقه هدف مجاز نبود خطای 403
بررسی بشه منطقه کاربر در لیست مناطق مجاز هست یا نه


var builder=WebApplication.CreateBuilder(args);
var app=builder.Build();

var allowedRegions=new Dictionary<string,List<string>>{
{"IR",new List<string>{"IR"}}
{"DE",new List<string>{"DE"}}
{"US",new List<string>{"US"}}

};

app.MapPost("/store",async (HttpRequest request)=>
{
    var userRegion=request.Headers["X-User-Region"].ToString();
    var targetRegion=request.Headers["X-Target-Region"].ToString();

    if(string.isNUllOrEmpty(userRegion) || string.isNUllOrEmpty(targetRegion)){
return Results.BadRequest("region header are required");

    }
    
    if(!allowedRegions.ContainsKey(userRegion)){
return Results.BadRequest("user region not supported");

    }

    //چالش : منطق بررسی ذخیره سازی داده طبق قوانین منطقه ای ناقص است و هر داده ای را حتی اگر مجاز نباشد، ذخیره میکند
    return Results.Ok($"Data stroed in {targetRegion} for user {userRegion}");
});
app.Run();

---------------------------------------6

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

// تعریف قوانین منطقه‌ای - هر منطقه فقط می‌تونه در مناطق مجاز ذخیره‌سازی کنه
var allowedRegions = new Dictionary<string, List<string>>
{
    {"IR", new List<string>{"IR"}}, // ایران فقط می‌تونه در خودش ذخیره کنه
    {"DE", new List<string>{"DE", "EU"}}, // آلمان می‌تونه در خودش یا EU ذخیره کنه  
    {"US", new List<string>{"US", "CA"}}, // آمریکا می‌تونه در خودش یا کانادا ذخیره کنه
    {"EU", new List<string>{"EU", "DE", "FR", "IT"}}, // اتحادیه اروپا
    {"CA", new List<string>{"CA", "US"}} // کانادا
};

app.MapPost("/store", async (HttpRequest request) =>
{
    var userRegion = request.Headers["X-User-Region"].ToString().ToUpper();
    var targetRegion = request.Headers["X-Target-Region"].ToString().ToUpper();

    // بررسی وجود هدرهای مورد نیاز
    if (string.IsNullOrEmpty(userRegion) || string.IsNullOrEmpty(targetRegion))
    {
        return Results.BadRequest(new { 
            error = "Region headers are required", 
            required = new[] { "X-User-Region", "X-Target-Region" }
        });
    }

    // بررسی اینکه منطقه کاربر پشتیبانی می‌شه یا نه
    if (!allowedRegions.ContainsKey(userRegion))
    {
        return Results.BadRequest(new { 
            error = "User region not supported", 
            userRegion = userRegion,
            supportedRegions = allowedRegions.Keys
        });
    }

    // **اصلاح مشکل اصلی**: بررسی اینکه آیا منطقه هدف برای این کاربر مجاز هست یا نه
    var allowedTargetRegions = allowedRegions[userRegion];
    if (!allowedTargetRegions.Contains(targetRegion))
    {
        return Results.Forbid(); // خطای 403 طبق درخواست
    }

    // اگر همه چیز درست بود، داده رو ذخیره کن
    return Results.Ok(new { 
        message = $"Data stored successfully in {targetRegion} for user from {userRegion}",
        userRegion = userRegion,
        targetRegion = targetRegion,
        timestamp = DateTime.UtcNow
    });
});

// اضافه کردن endpoint برای مشاهده قوانین منطقه‌ای
app.MapGet("/regions", () => Results.Ok(new { 
    allowedRegions = allowedRegions,
    description = "Shows which target regions are allowed for each user region"
}));

// اضافه کردن middleware برای لاگ کردن درخواست‌ها
app.Use(async (context, next) =>
{
    Console.WriteLine($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {context.Request.Method} {context.Request.Path}");
    
    if (context.Request.Headers.ContainsKey("X-User-Region"))
        Console.WriteLine($"User Region: {context.Request.Headers["X-User-Region"]}");
    
    if (context.Request.Headers.ContainsKey("X-Target-Region"))
        Console.WriteLine($"Target Region: {context.Request.Headers["X-Target-Region"]}");
    
    await next.Invoke();
});

app.Run();

